// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ø–Ω–¥–µ–∫—Å SDK
let ysdk = null;
let gameplayAPI = null;
let isYandexPlatform = false;

// –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
let resourcesLoaded = false;

// –¢–µ–∫—É—â–∏–π —è–∑—ã–∫
let currentLanguage = 'ru';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–≥—Ä—ã
const BOARD_WIDTH = 10;
const BOARD_HEIGHT = 20;
const EMPTY = 'empty';
const SCREEN_WIDTH = 700;
const SCREEN_HEIGHT = 700;

// –§–∏–≥—É—Ä—ã
const PIECES = [
	{ shape: [[1, 1, 1, 1]], color: '#00f5ff' }, // I
	{ shape: [[1, 1], [1, 1]], color: '#ffeaa7' }, // O
	{ shape: [[0, 1, 0], [1, 1, 1]], color: '#a29bfe' }, // T
	{ shape: [[1, 1, 0], [0, 1, 1]], color: '#55efc4' }, // S
	{ shape: [[0, 1, 1], [1, 1, 0]], color: '#fd79a8' }, // Z
	{ shape: [[1, 0, 0], [1, 1, 1]], color: '#fdcb6e' }, // L
	{ shape: [[0, 0, 1], [1, 1, 1]], color: '#e17055' }  // J
];

// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const boardElement = document.getElementById('board');
const nextBoardElement = document.getElementById('next-board');
const scoreElement = document.getElementById('score');
const levelElement = document.getElementById('level');
const linesElement = document.getElementById('lines');
const revivalsElement = document.getElementById('revivals');
const startButton = document.getElementById('start-button');
const pauseButton = document.getElementById('pause-button');
const reviveButton = document.getElementById('revive-button');
const newGameButton = document.getElementById('new-game-button');
const gameOverElement = document.getElementById('game-over');
const finalScoreElement = document.getElementById('final-score');
const adIndicator = document.getElementById('ad-indicator');

// –ö–Ω–æ–ø–∫–∏ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
const rotateBtn = document.querySelector('.rotate-btn');
const leftBtn = document.querySelector('.left-btn');
const downBtn = document.querySelector('.down-btn');
const rightBtn = document.querySelector('.right-btn');

// –ò–≥—Ä–æ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let board = [];
let currentPiece = null;
let nextPiece = null;
let score = 0;
let level = 1;
let lines = 0;
let revivals = 0;
let gameInterval = null;
let isPaused = false;  // –∏–≥—Ä–∞ —Å–µ–π—á–∞—Å –Ω–∞ –ø–∞—É–∑–µ –∏–ª–∏ –Ω–µ—Ç
let wasPausedByChangeScreenSize = false;  // –∏–≥—Ä–∞ –±—ã–ª–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–∞—É–∑—É –∏–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
let isGameOver = false;
let isGameStarted = false;

// –¢–µ–∫—Å—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
const translations = {
	ru: {
		nextPiece: "–°–ª–µ–¥—É—é—â–∞—è",
		stats: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
		score: "–û—á–∫–∏:",
		level: "–£—Ä–æ–≤–µ–Ω—å:",
		lines: "–õ–∏–Ω–∏–∏:",
		revivals: "–í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–π:",
		startButton: "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É",
		pauseButton: "–ü–∞—É–∑–∞",
		continueButton: "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
		controls: "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
		controlMove: "‚Üê ‚Üí : –î–≤–∏–∂–µ–Ω–∏–µ",
		controlRotate: "‚Üë : –ü–æ–≤–æ—Ä–æ—Ç",
		controlDown: "‚Üì : –£—Å–∫–æ—Ä–µ–Ω–∏–µ",
		controlPause: "–ü—Ä–æ–±–µ–ª : –ü–∞—É–∑–∞",
		gameOver: "–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!",
		finalScore: "–í–∞—à —Å—á–µ—Ç: ",
		restartButton: "–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞",
		adIndicator: "–†–µ–∫–ª–∞–º–∞",
		reviveButton: "–í–æ–∑—Ä–æ–¥–∏—Ç—å—Å—è",
		newGameButton: "–ù–æ–≤–∞—è –∏–≥—Ä–∞",
		smallScreenTitle: "üì± –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ –æ–∫–Ω–æ",
		smallScreenMessage: `–î–ª—è –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π –∏–≥—Ä—ã —É–≤–µ–ª–∏—á—å—Ç–µ —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –±—Ä–∞—É–∑–µ—Ä–∞. –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${SCREEN_WIDTH}√ó${SCREEN_HEIGHT} –ø–∏–∫—Å–µ–ª–µ–π.`
	},
	en: {
		nextPiece: "Next",
		stats: "Statistics",
		score: "Score:",
		level: "Level:",
		lines: "Lines:",
		revivals: "Revivals:",
		startButton: "Start Game",
		pauseButton: "Pause",
		continueButton: "Continue",
		controls: "Controls",
		controlMove: "‚Üê ‚Üí : Move",
		controlRotate: "‚Üë : Rotate",
		controlDown: "‚Üì : Speed up",
		controlPause: "Space : Pause",
		gameOver: "Game Over!",
		finalScore: "Your score: ",
		restartButton: "Play Again",
		adIndicator: "Ad",
		reviveButton: "Revive",
		newGameButton: "New Game",
		smallScreenTitle: "üì± The window is too small",
		smallScreenMessage: `For a comfortable game, increase the size of the browser window. Minimum size: ${SCREEN_WIDTH}√ó${SCREEN_HEIGHT} pixels.`
	}
};



// –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
function checkScreenSize() {
	
	const smallScreenWarning = document.getElementById('small-screen-warning');
	const gameContainer = document.querySelector('.game-container');
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –±–æ–ª—å—à–æ–π —ç–∫—Ä–∞–Ω
	const isScreenTooSmall = window.innerWidth < SCREEN_WIDTH || window.innerHeight < SCREEN_HEIGHT;
	
	if (isScreenTooSmall) {
		smallScreenWarning.style.display = 'flex';
		gameContainer.style.display = 'none';
		
		// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞–≤–∏–º –∏–≥—Ä—É –Ω–∞ –ø–∞—É–∑—É –µ—Å–ª–∏ –æ–Ω–∞ –∑–∞–ø—É—â–µ–Ω–∞
		if (isGameStarted && !isPaused && !isGameOver) {
			togglePause();
			wasPausedByChangeScreenSize = true;  // –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —ç—Ç–æ, —á—Ç–æ–±—ã –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É
		}
		
	} else {
		// –ï—Å–ª–∏ –∏–≥—Ä–∞ –±—ã–ª–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–∞—É–∑—É –∏–∑-–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
		if (wasPausedByChangeScreenSize) {
			togglePause();  // –≤–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É
			wasPausedByChangeScreenSize = false;  // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
		}
		smallScreenWarning.style.display = 'none';
		gameContainer.style.display = 'flex';
	}
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤
async function loadAllResources() {
	try {
		await Promise.all([
			loadBackgroundImage(),
			loadIcon(),
			initializeYandexSDK()
		]);
		resourcesLoaded = true;
		// –ü–†–Ø–ú–û –ó–î–ï–°–¨ –≤—ã–∑—ã–≤–∞–µ–º —Å–∫—Ä—ã—Ç–∏–µ —ç–∫—Ä–∞–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏
		hideLoadingScreen();
	} catch (error) {
		console.error('[LOG_ERROR] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤:', error);
		resourcesLoaded = true;
		// –î–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–∫—Ä—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
		hideLoadingScreen();
	}
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
function loadBackgroundImage() {
	return new Promise((resolve, reject) => {
		const bgImage = new Image();
		bgImage.src = 'bg.jpg';
		
		bgImage.onload = function() {
			console.log('[LOG_INFO] –§–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ');
			resolve();
		};
		
		bgImage.onerror = function() {
			console.warn('[LOG_WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω');
			resolve(); // –í—Å–µ —Ä–∞–≤–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º, —á—Ç–æ–±—ã –∏–≥—Ä–∞ –∑–∞–ø—É—Å—Ç–∏–ª–∞—Å—å
		};
	});
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∫–æ–Ω–∫–∏
function loadIcon() {
	return new Promise((resolve) => {
		const icon = new Image();
		icon.src = 'icon.png';
		
		icon.onload = function() {
			console.log('[LOG_INFO] –ò–∫–æ–Ω–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
			resolve();
		};
		
		icon.onerror = function() {
			console.warn('[LOG_WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∫–æ–Ω–∫—É');
			resolve(); // –í—Å–µ —Ä–∞–≤–Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º
		};
	});
}

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ø–Ω–¥–µ–∫—Å SDK
function initializeYandexSDK() {
	return new Promise((resolve) => {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –Ø–Ω–¥–µ–∫—Å –ò–≥—Ä
		if (typeof YaGames !== 'undefined') {
			YaGames.init().then(_ysdk => {
				ysdk = _ysdk;
				isYandexPlatform = true;
				console.log('[LOG_INFO] Yandex SDK initialized');
				
				// –ü–æ–ª—É—á–∞–µ–º Gameplay API
				gameplayAPI = ysdk.features.GameplayAPI;
				
				// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ —á–µ—Ä–µ–∑ SDK
				detectLanguage();
				
				// –°–æ–æ–±—â–∞–µ–º SDK, —á—Ç–æ –∏–≥—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
				ysdk.features.LoadingAPI?.ready?.();
				resolve();
			}).catch(error => {
				console.error('[LOG_ERROR] Failed to initialize Yandex SDK:', error);
				// –ï—Å–ª–∏ SDK –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è, –≤—Å–µ —Ä–∞–≤–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
				detectLanguage();
				resolve();
			});
		} else {
			// –ï—Å–ª–∏ –Ω–µ –≤ –Ø–Ω–¥–µ–∫—Å –ò–≥—Ä–∞—Ö, —Å—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
			detectLanguage();
			resolve();
		}
	});
}

// –§—É–Ω–∫—Ü–∏—è —Å–∫—Ä—ã—Ç–∏—è —ç–∫—Ä–∞–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏
function hideLoadingScreen() {
	const loadingScreen = document.getElementById('loading-screen');
	loadingScreen.style.opacity = '0';
	setTimeout(() => {
		loadingScreen.style.display = 'none';
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
		checkScreenSize();
		
		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
		initGame();
	}, 500);
}

// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–ª–∞–º—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏–≥—Ä—ã
if (isYandexPlatform) {
	showAd("—Å—Ç–∞—Ä—Ç –∏–≥—Ä—ã");
}

loadAllResources();  // –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ä–µ—Å—É—Ä—Å–æ–≤

// –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞
function detectLanguage() {
	if (ysdk && ysdk.environment) {
		// –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ø–Ω–¥–µ–∫—Å –ò–≥—Ä
		const lang = ysdk.environment.i18n.lang;
		console.log('[LOG_INFO] Detected language:', lang);
		
		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä—É—Å—Å–∫–æ–≥–æ
		if (lang.startsWith('ru')) {
			currentLanguage = 'ru';
		}
		// –î–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –∏ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
		else {
			currentLanguage = 'en'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
		}
	} else {
		// –ï—Å–ª–∏ SDK –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —è–∑—ã–∫ –±—Ä–∞—É–∑–µ—Ä–∞
		const browserLang = navigator.language || navigator.userLanguage;
		if (browserLang.startsWith('ru')) {
			currentLanguage = 'ru';
		} else {
			currentLanguage = 'en';
		}
	}

	// –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
	applyTranslations();
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
function applyTranslations() {
	const t = translations[currentLanguage];
	
	// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤
	document.getElementById('next-piece-title').textContent = t.nextPiece;
	document.getElementById('stats-title').textContent = t.stats;
	document.getElementById('score-label').textContent = t.score;
	document.getElementById('level-label').textContent = t.level;
	document.getElementById('lines-label').textContent = t.lines;
	document.getElementById('revivals-label').textContent = t.revivals;
	document.getElementById('start-button').textContent = t.startButton;
	document.getElementById('pause-button').textContent = t.pauseButton;
	document.getElementById('controls-title').textContent = t.controls;
	document.getElementById('control-move').textContent = t.controlMove;
	document.getElementById('control-rotate').textContent = t.controlRotate;
	document.getElementById('control-down').textContent = t.controlDown;
	document.getElementById('control-pause').textContent = t.controlPause;
	document.getElementById('game-over-title').textContent = t.gameOver;
	document.getElementById('final-score-text').textContent = t.finalScore;
	document.getElementById('revive-button').textContent = t.reviveButton;
	document.getElementById('new-game-button').textContent = t.newGameButton;
	document.getElementById('small-screen-title').textContent = t.smallScreenTitle;
	document.getElementById('small-screen-message').textContent = t.smallScreenMessage;
	
	// –û–±–Ω–æ–≤–ª—è–µ–º title —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	document.title = currentLanguage === 'ru' ? '–ö—É–±–∏—á–µ—Å–∫–∞—è –º–µ—à–∞–Ω–∏–Ω–∞' : 'Cubic Chaos';
	
	// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Ä–µ–∫–ª–∞–º—ã
	document.getElementById('ad-indicator').textContent = t.adIndicator;
}

function initGame() {
	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
	initBoard();
	
	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
	startButton.addEventListener('click', startGame);
	pauseButton.addEventListener('click', togglePauseWithAd);
	reviveButton.addEventListener('click', reviveGame);
	newGameButton.addEventListener('click', startGame);
	
	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	setupMobileControls();
	
	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à
	document.addEventListener('keydown', handleKeyDown);
	
	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
	window.addEventListener('resize', checkScreenSize);
	
	// –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞
	checkScreenSize();
	
	// –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞
	renderBoard();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
function initBoard() {
	board = [];
	for (let row = 0; row < BOARD_HEIGHT; row++) {
		board[row] = [];
		for (let col = 0; col < BOARD_WIDTH; col++) {
			board[row][col] = EMPTY;
		}
	}
	
	// –û—á–∏—Å—Ç–∫–∞ DOM
	boardElement.innerHTML = '';
	nextBoardElement.innerHTML = '';
	
	// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–µ—Ç–æ–∫ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
	for (let row = 0; row < BOARD_HEIGHT; row++) {
		for (let col = 0; col < BOARD_WIDTH; col++) {
			const cell = document.createElement('div');
			cell.classList.add('cell');
			cell.dataset.row = row;
			cell.dataset.col = col;
			boardElement.appendChild(cell);
		}
	}
	
	// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–µ—Ç–æ–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Ñ–∏–≥—É—Ä—ã
	for (let row = 0; row < 4; row++) {
		for (let col = 0; col < 4; col++) {
			const cell = document.createElement('div');
			cell.classList.add('cell');
			nextBoardElement.appendChild(cell);
		}
	}
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π —Ñ–∏–≥—É—Ä—ã
function createPiece() {
	const randomIndex = Math.floor(Math.random() * PIECES.length);
	const piece = PIECES[randomIndex];
	
	return {
		shape: piece.shape,
		color: piece.color,
		row: 0,
		col: Math.floor((BOARD_WIDTH - piece.shape[0].length) / 2)
	};
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
function renderBoard() {
	
	checkScreenSize();  // –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞ –ø—Ä–∏ –∫–∞–∂–¥–æ–π –æ—Ç—Ä–∏—Å–æ–≤–∫–µ
	
	// –û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è
	const cells = boardElement.querySelectorAll('.cell');
	cells.forEach(cell => {
		cell.style.backgroundColor = '';
		cell.classList.remove('filled');
	});
	
	// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—Ç–∞—Ç–∏—á–Ω—ã—Ö —Ñ–∏–≥—É—Ä
	for (let row = 0; row < BOARD_HEIGHT; row++) {
		for (let col = 0; col < BOARD_WIDTH; col++) {
			if (board[row][col] !== EMPTY) {
				const cell = boardElement.querySelector(`.cell[data-row="${row}"][data-col="${col}"]`);
				cell.style.backgroundColor = board[row][col];
				cell.classList.add('filled');
			}
		}
	}
	
	// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–π —Ñ–∏–≥—É—Ä—ã
	if (currentPiece) {
		for (let row = 0; row < currentPiece.shape.length; row++) {
			for (let col = 0; col < currentPiece.shape[row].length; col++) {
				if (currentPiece.shape[row][col]) {
					const boardRow = currentPiece.row + row;
					const boardCol = currentPiece.col + col;
					
					if (boardRow >= 0 && boardRow < BOARD_HEIGHT && boardCol >= 0 && boardCol < BOARD_WIDTH) {
						const cell = boardElement.querySelector(`.cell[data-row="${boardRow}"][data-col="${boardCol}"]`);
						cell.style.backgroundColor = currentPiece.color;
						cell.classList.add('filled');
					}
				}
			}
		}
	}
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–π —Ñ–∏–≥—É—Ä—ã
function renderNextPiece() {
	const cells = nextBoardElement.querySelectorAll('.cell');
	cells.forEach(cell => {
		cell.style.backgroundColor = '';
		cell.classList.remove('filled');
	});
	
	if (nextPiece) {
		const offsetX = Math.floor((4 - nextPiece.shape[0].length) / 2);
		const offsetY = Math.floor((4 - nextPiece.shape.length) / 2);
		
		for (let row = 0; row < nextPiece.shape.length; row++) {
			for (let col = 0; col < nextPiece.shape[row].length; col++) {
				if (nextPiece.shape[row][col]) {
					const cellIndex = (offsetY + row) * 4 + (offsetX + col);
					if (cellIndex >= 0 && cellIndex < 16) {
						cells[cellIndex].style.backgroundColor = nextPiece.color;
						cells[cellIndex].classList.add('filled');
					}
				}
			}
		}
	}
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π
function hasCollision(piece, rowOffset = 0, colOffset = 0) {
	for (let row = 0; row < piece.shape.length; row++) {
		for (let col = 0; col < piece.shape[row].length; col++) {
			if (piece.shape[row][col]) {
				const newRow = piece.row + row + rowOffset;
				const newCol = piece.col + col + colOffset;
				
				// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü –∏ –¥—Ä—É–≥–∏—Ö —Ñ–∏–≥—É—Ä
				if (
					newRow >= BOARD_HEIGHT || 
					newCol < 0 || 
					newCol >= BOARD_WIDTH || 
					(newRow >= 0 && board[newRow][newCol] !== EMPTY)
				) {
					return true;
				}
			}
		}
	}
	return false;
}

// –ü–æ–≤–æ—Ä–æ—Ç —Ñ–∏–≥—É—Ä—ã
function rotatePiece() {
	if (!currentPiece) return;
	
	// –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–≤–µ—Ä–Ω—É—Ç–æ–π —Ñ–∏–≥—É—Ä—ã
	const rotatedShape = [];
	const rows = currentPiece.shape.length;
	const cols = currentPiece.shape[0].length;
	
	for (let col = 0; col < cols; col++) {
		rotatedShape[col] = [];
		for (let row = rows - 1; row >= 0; row--) {
			rotatedShape[col][rows - 1 - row] = currentPiece.shape[row][col];
		}
	}
	
	const originalShape = currentPiece.shape;
	currentPiece.shape = rotatedShape;
	
	// –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞, –æ—Ç–º–µ–Ω–∞ –ø–æ–≤–æ—Ä–æ—Ç–∞
	if (hasCollision(currentPiece)) {
		currentPiece.shape = originalShape;
	} else {
		renderBoard();
	}
}

// –î–≤–∏–∂–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã –≤–ª–µ–≤–æ
function moveLeft() {
	if (!currentPiece || hasCollision(currentPiece, 0, -1)) return;
	currentPiece.col--;
	renderBoard();
}

// –î–≤–∏–∂–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã –≤–ø—Ä–∞–≤–æ
function moveRight() {
	if (!currentPiece || hasCollision(currentPiece, 0, 1)) return;
	currentPiece.col++;
	renderBoard();
}

// –î–≤–∏–∂–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã –≤–Ω–∏–∑
function moveDown() {
	if (!currentPiece || hasCollision(currentPiece, 1, 0)) {
		// –ï—Å–ª–∏ —Ñ–∏–≥—É—Ä–∞ –¥–æ—Å—Ç–∏–≥–ª–∞ –¥–Ω–∞ –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ñ–∏–≥—É—Ä—ã
		placePiece();
		return;
	}
	currentPiece.row++;
	renderBoard();
}

// –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã –Ω–∞ –ø–æ–ª–µ
function placePiece() {
	if (!currentPiece) return;
	
	for (let row = 0; row < currentPiece.shape.length; row++) {
		for (let col = 0; col < currentPiece.shape[row].length; col++) {
			if (currentPiece.shape[row][col]) {
				const boardRow = currentPiece.row + row;
				const boardCol = currentPiece.col + col;
				
				if (boardRow >= 0) {
					board[boardRow][boardCol] = currentPiece.color;
				}
			}
		}
	}
	
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ª–∏–Ω–∏–π
	checkLines();
	
	// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ñ–∏–≥—É—Ä—ã
	currentPiece = nextPiece;
	nextPiece = createPiece();
	
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–≥—Ä—ã
	if (hasCollision(currentPiece)) {
		gameOver();
		return;
	}
	
	renderBoard();
	renderNextPiece();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ª–∏–Ω–∏–π
function checkLines() {
	let linesCleared = 0;
	
	for (let row = BOARD_HEIGHT - 1; row >= 0; row--) {
		if (board[row].every(cell => cell !== EMPTY)) {
			// –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏–Ω–∏–∏
			board.splice(row, 1);
			// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –ø—É—Å—Ç–æ–π –ª–∏–Ω–∏–∏ –≤–≤–µ—Ä—Ö—É
			board.unshift(Array(BOARD_WIDTH).fill(EMPTY));
			linesCleared++;
			row++; // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—É –∂–µ —Å—Ç—Ä–æ–∫—É —Å–Ω–æ–≤–∞ –ø–æ—Å–ª–µ —Å–¥–≤–∏–≥–∞
		}
	}
	
	if (linesCleared > 0) {
		// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞
		updateScore(linesCleared);
	}
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞
function updateScore(linesCleared) {
	const points = [0, 40, 100, 300, 1200]; // –û—á–∫–∏ –∑–∞ 0, 1, 2, 3, 4 –ª–∏–Ω–∏–∏
	score += points[linesCleared] * level;
	lines += linesCleared;
	level = Math.floor(lines / 10) + 1;
	
	scoreElement.textContent = score;
	levelElement.textContent = level;
	linesElement.textContent = lines;
	
	// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏–≥—Ä—ã
	if (gameInterval) {
		clearInterval(gameInterval);
		gameInterval = setInterval(gameLoop, 1000 - (level - 1) * 100);
	}
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∫–ª–∞–º—É
function showAd(reason) {
	console.log(`[LOG_INFO] –ü–æ–∫–∞–∑ —Ä–µ–∫–ª–∞–º—ã: ${reason}`);
	
	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ä–µ–∫–ª–∞–º—ã
	adIndicator.style.display = 'block';
	adIndicator.textContent = `${translations[currentLanguage].adIndicator}: ${reason}`;
	
	// –°—Ç–∞–≤–∏–º –∏–≥—Ä—É –Ω–∞ –ø–∞—É–∑—É
	const wasPaused = isPaused;
	if (!isPaused) {
		togglePause();
	}
	
	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–ª–∞–º—É
	ysdk.adv.showFullscreenAdv({
		callbacks: {
			onClose: function(wasShown) {
				console.log('[LOG_INFO] –†–µ–∫–ª–∞–º–∞ –∑–∞–∫—Ä—ã—Ç–∞, –±—ã–ª–∞ –ø–æ–∫–∞–∑–∞–Ω–∞:', wasShown);
				
				// –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
				adIndicator.style.display = 'none';
				
				// –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞ –ø–∞—É–∑–µ –¥–æ –ø–æ–∫–∞–∑–∞ —Ä–µ–∫–ª–∞–º—ã
				if (!wasPaused && isPaused) {
					togglePause();
				}
			},
			onError: function(error) {
				console.error('[LOG_ERROR] –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–µ–∫–ª–∞–º—ã:', error);
				
				// –°–∫—Ä—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
				adIndicator.style.display = 'none';
				
				// –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞ –ø–∞—É–∑–µ –¥–æ –ø–æ–∫–∞–∑–∞ —Ä–µ–∫–ª–∞–º—ã
				if (!wasPaused && isPaused) {
					togglePause();
				}
			}
		}
	});
}

// –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
function gameLoop() {
	if (!isPaused && !isGameOver) {
		moveDown();
	}
}

// –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
function startGame() {
	if (gameInterval) {
		clearInterval(gameInterval);
	}
	
	startButton.style.visibility = 'hidden'; // –ø—Ä—è—á–µ–º –∫–Ω–æ–ø–∫—É –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
	pauseButton.style.visibility = 'visible'; // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ü–∞—É–∑–∞/–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
	
	initBoard();
	score = 0;
	level = 1;
	lines = 0;
	isPaused = false;
	isGameOver = false;
	isGameStarted = true;
	
	scoreElement.textContent = score;
	levelElement.textContent = level;
	linesElement.textContent = lines;
	
	currentPiece = createPiece();
	nextPiece = createPiece();
	
	renderBoard();
	renderNextPiece();
	
	gameOverElement.style.display = 'none';
	pauseButton.textContent = translations[currentLanguage].pauseButton;
	
	gameInterval = setInterval(gameLoop, 1000);
	
	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–ª–∞–º—É –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
	if (isYandexPlatform) {
		showAd("–Ω–æ–≤–∞—è –∏–≥—Ä–∞");
	}
}

// –ü–∞—É–∑–∞/–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∏–≥—Ä—ã —Å —Ä–µ–∫–ª–∞–º–æ–π
function togglePauseWithAd() {
	if (!isGameStarted || isGameOver) return;
	
	togglePause();
	
	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–ª–∞–º—É –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ü–∞—É–∑–∞/–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
	if (isYandexPlatform) {
		const adReason = isPaused ? "–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∏–≥—Ä—ã" : "–ø–∞—É–∑–∞ –∏–≥—Ä—ã";
		showAd(adReason);
	}
}

// –ü–∞—É–∑–∞/–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –∏–≥—Ä—ã (–±–µ–∑ —Ä–µ–∫–ª–∞–º—ã)
function togglePause() {
	if (!isGameStarted || isGameOver) return;
	
	isPaused = !isPaused;
	
	if (isPaused) {
		pauseButton.textContent = translations[currentLanguage].continueButton;
	} else {
		pauseButton.textContent = translations[currentLanguage].pauseButton;
	}
}

// –í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Å–ª–µ –ø—Ä–æ–∏–≥—Ä—ã—à–∞
function reviveGame() {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–ª–∞–º—É –∑–∞ –≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ
    if (isYandexPlatform) {
        showAd("–≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ");
    }
    
    // –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ñ–∏–≥—É—Ä—É, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑–≤–∞–ª–∞ –ø—Ä–æ–∏–≥—Ä—ã—à
    for (let row = 0; row < currentPiece.shape.length; row++) {
        for (let col = 0; col < currentPiece.shape[row].length; col++) {
            if (currentPiece.shape[row][col]) {
                const boardRow = currentPiece.row + row;
                const boardCol = currentPiece.col + col;
                
                if (boardRow >= 0) {
                    board[boardRow][boardCol] = EMPTY;
                }
            }
        }
    }
    
    // –û–ß–ò–°–¢–ö–ê: —É–±–∏—Ä–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–µ—Ä—Ö–Ω–∏—Ö —Å—Ç—Ä–æ–∫ —á—Ç–æ–±—ã –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –º–µ—Å—Ç–æ
    for (let row = 0; row < 10; row++) {
        for (let col = 0; col < BOARD_WIDTH; col++) {
            board[row][col] = EMPTY;
        }
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ñ–∏–≥—É—Ä—É
    currentPiece = createPiece();
    currentPiece.row = 0; // –ù–∞—á–∏–Ω–∞–µ–º —Å–≤–µ—Ä—Ö—É
    
    // –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
    isGameOver = false;
    isGameStarted = true;
    gameOverElement.style.display = 'none';
    
    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø–æ–ª–µ
    renderBoard();
    
	pauseButton.style.visibility = 'visible'; // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –ü–∞—É–∑–∞/–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
	
    revivals++;  // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –≤–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–π
	scoreElement.textContent = revivals;  // –≤—ã–≤–æ–¥–∏–º –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
	
	// –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
    if (!gameInterval) {
        gameInterval = setInterval(gameLoop, 1000 - (level - 1) * 100);
    }
    
    console.log('[LOG_INFO] –ò–≥—Ä–æ–∫ –≤–æ–∑—Ä–æ–¥–∏–ª—Å—è');
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–≥—Ä—ã
function gameOver() {
	isGameOver = true;
	isGameStarted = false;
	clearInterval(gameInterval);
	gameInterval = null;
	
	finalScoreElement.textContent = score;
	gameOverElement.style.display = 'flex';
	
	pauseButton.style.visibility = 'hidden'; // –ø—Ä—è—á–µ–º –∫–Ω–æ–ø–∫—É –ü–∞—É–∑–∞/–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à
function handleKeyDown(event) {
	if (isGameOver || !isGameStarted) return;
	
	switch(event.key) {
		case 'ArrowLeft':
			event.preventDefault();
			moveLeft();
			break;
		case 'ArrowRight':
			event.preventDefault();
			moveRight();
			break;
		case 'ArrowDown':
			event.preventDefault();
			moveDown();
			break;
		case 'ArrowUp':
			event.preventDefault();
			rotatePiece();
			break;
		case ' ':
			event.preventDefault();
			togglePauseWithAd(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Ä—Å–∏—é —Å —Ä–µ–∫–ª–∞–º–æ–π
			break;
	}
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
function setupMobileControls() {
	// –ü–æ–≤–æ—Ä–æ—Ç
	rotateBtn.addEventListener('touchstart', (e) => {
		e.preventDefault();
		if (!isGameOver && !isPaused && isGameStarted) {
			rotatePiece();
		}
	});
	
	// –í–ª–µ–≤–æ
	leftBtn.addEventListener('touchstart', (e) => {
		e.preventDefault();
		if (!isGameOver && !isPaused && isGameStarted) {
			moveLeft();
		}
	});
	
	// –í–Ω–∏–∑
	downBtn.addEventListener('touchstart', (e) => {
		e.preventDefault();
		if (!isGameOver && !isPaused && isGameStarted) {
			moveDown();
		}
	});
	
	// –í–ø—Ä–∞–≤–æ
	rightBtn.addEventListener('touchstart', (e) => {
		e.preventDefault();
		if (!isGameOver && !isPaused && isGameStarted) {
			moveRight();
		}
	});
	
	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
	rotateBtn.addEventListener('mousedown', (e) => {
		e.preventDefault();
		if (!isGameOver && !isPaused && isGameStarted) {
			rotatePiece();
		}
	});
	
	leftBtn.addEventListener('mousedown', (e) => {
		e.preventDefault();
		if (!isGameOver && !isPaused && isGameStarted) {
			moveLeft();
		}
	});
	
	downBtn.addEventListener('mousedown', (e) => {
		e.preventDefault();
		if (!isGameOver && !isPaused && isGameStarted) {
			moveDown();
		}
	});
	
	rightBtn.addEventListener('mousedown', (e) => {
		e.preventDefault();
		if (!isGameOver && !isPaused && isGameStarted) {
			moveRight();
		}
	});
}